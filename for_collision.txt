Стабильность интерфейса является основным  требованием  к библиотеке. Библиотека, разработанная в спешке, или собранная в библиотеку куча самостоятельно написанных функций не будет подчиняться единому соглашению о вызовах и возвращаемых значениях, обладать единым поведением в отношении распределения памяти и вряд ли  будет отвечать требованиям эффективности. 
Необходимость сделать случайно  собранную библиотеку последовательной и  согласованной будет возникать практически сразу же; однако для исправления всех фУкций в библиотеке требуется достаточно продолжительное вре?, которого может просто не быть у разработчиков. 
Проектирование оптимизированной библиотеки подобно проектированию другого кода С++, но с более высокими ставками. Библиотеки по определению предназначены для широкого использования. Любые недостатки в проектировании, реализации или производительности библиотеки будут общими для всех пользователей. Применение случайных практик кодирования, которые могут быть терпимы в некритичном коде, становятся куда более проблематичными при разработке библиотек. В  разработке критического кода наподобие библиотек находят свое применение проверенные методы разработки старой школы, включающие первоначальные спецификации, доку­
ментацию и модульное тестирование.
Контрольные примеры имеют важное значение для любого программного обеспечения. Они помогают проверить правильность исходного дизайна и уменьшить вероятность того, что изменения, внесенные во время оптимизации, повлияют на правильность программы. Неудивительно, что они приобретают еще большее значение для кодирования библиотек, где ставки куда выше.
Контрольные примеры помогают обнаружить зависимости и  взаимосвязи, допущенные при  проектировании библиотеки. Функции хорошо продуманных библиотек можно тестировать отдельно от других. Если до тестирования целевой функции необходимо создание множества объектов, то это сигнал разработчику о том, что между компонентами библиотеки существует слишком сильная связь.
Контрольные примеры помогают разработчику практиковаться в использовании библиотеки. Без такой практики даже опытные проектировщики могут легко оставить без внимания важные функции. Контрольные примеры облегчают обнаружение проблем в проекте на ранней стадии, когда существенные изменения интерфейса библиотеки не являются столь болезненными. С помощью библиотеки проектировщику легче выявить используемые идиомы и закодировать их таким образом, чтобы это привело к более эффективным интерфейсам функций. 
Контрольные примеры неплохо подходят и для хронометража. Хронометраж позволяет убедиться, что все предлагаемые оптимизации повышают производительность на самом деле. Хронометраж может быть добавлен к другим контрольным примерам, чтобы можно было убедиться, что вносимые изменения не снижают производительности. 